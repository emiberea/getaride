<?php

namespace EB\RideBundle\Entity;

use Doctrine\ORM\EntityRepository;
use EB\UserBundle\Entity\User;

/**
 * RideRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RideRepository extends EntityRepository
{
    /**
     * @param array $searchParams
     * @param User $user
     * @return array
     */
    public function getRidesByDateLocationAndSeatsNo(array $searchParams = array(), User $user)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->innerJoin('r.rideStatus', 'rs');
        $qb->where(
            $qb->expr()->andX(
                $qb->expr()->eq('r.isPublic', true),
                $qb->expr()->neq('r.user', ':user'),
                $qb->expr()->eq('rs.id', RideStatus::AVAILABLE),
                isset($searchParams['startDate']) ? $qb->expr()->eq('r.startDate', ':startDate') : null,
                isset($searchParams['startLocation']) ? $qb->expr()->eq('r.startLocation', ':startLocation') : null,
                isset($searchParams['stopLocation']) ? $qb->expr()->eq('r.stopLocation', ':stopLocation') : null,
                isset($searchParams['emptySeatsNo']) ? $qb->expr()->eq('r.emptySeatsNo', ':emptySeatsNo') : null,
                isset($searchParams['baggagePerSeat']) ? $qb->expr()->eq('r.baggagePerSeat', ':baggagePerSeat') : null
            )
        );
        $qb->setParameter('user', $user);
        isset($searchParams['startDate']) ? $qb->setParameter('startDate', $searchParams['startDate']) : null;
        isset($searchParams['startLocation']) ? $qb->setParameter('startLocation', $searchParams['startLocation']) : null;
        isset($searchParams['stopLocation']) ? $qb->setParameter('stopLocation', $searchParams['stopLocation']) : null;
        isset($searchParams['emptySeatsNo']) ? $qb->setParameter('emptySeatsNo', $searchParams['emptySeatsNo']) : null;
        isset($searchParams['baggagePerSeat']) ? $qb->setParameter('baggagePerSeat', $searchParams['baggagePerSeat']) : null;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param array $searchParams
     * @param User $user
     * @return array
     */
    public function getRidesByDateLocationOrSeatsNo(array $searchParams = array(), User $user)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->innerJoin('r.rideStatus', 'rs');
        $qb->where(
            $qb->expr()->andX(
                $qb->expr()->eq('r.isPublic', true),
                $qb->expr()->neq('r.user', ':user'),
                $qb->expr()->eq('rs.id', RideStatus::AVAILABLE),
                $qb->expr()->orX(
                    $qb->expr()->eq('r.startDate', ':startDate'),
                    $qb->expr()->eq('r.startLocation', ':startLocation'),
                    $qb->expr()->eq('r.stopLocation', ':stopLocation'),
                    $qb->expr()->eq('r.emptySeatsNo', ':emptySeatsNo'),
                    $qb->expr()->eq('r.baggagePerSeat', ':baggagePerSeat')
                )
            )
        );
        $qb->setParameters(array(
            'user'           => $user,
            'startDate'      => $searchParams['startDate'],
            'startLocation'  => $searchParams['startLocation'],
            'stopLocation'   => $searchParams['stopLocation'],
            'emptySeatsNo'   => $searchParams['emptySeatsNo'],
            'baggagePerSeat' => $searchParams['baggagePerSeat'],
        ));

        return $qb->getQuery()->getResult();
    }
}
