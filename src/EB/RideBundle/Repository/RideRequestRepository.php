<?php

namespace EB\RideBundle\Repository;

use Doctrine\ORM\EntityRepository;
use EB\RideBundle\Entity\Ride;
use EB\RideBundle\Entity\RideRequestStatus;
use EB\UserBundle\Entity\User;

/**
 * RideRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RideRequestRepository extends EntityRepository
{
    /**
     * @param Ride $ride
     * @param User $user - the user that want to join the ride
     * @return array
     */
    public function findByRideAndUser(Ride $ride, User $user)
    {
        $qb = $this->createQueryBuilder('rr');
        $qb->where(
            $qb->expr()->andX(
                $qb->expr()->eq('rr.ride', ':ride'),
                $qb->expr()->eq('rr.user', ':user')
            )
        );
        $qb->setParameters(array(
            'ride' => $ride,
            'user' => $user,
        ));

        return $qb->getQuery()->getResult();
    }

    /**
     * @param User $user
     * @param $status
     * @return mixed
     */
    public function countRideRequestsByUserAndStatus(User $user, $status)
    {
        $qb = $this->createQueryBuilder('rr');
        $qb->select(
            $qb->expr()->count('rr.id')
        );
        $qb->where(
            $qb->expr()->andX(
                $qb->expr()->eq('rr.user', ':user'),
                $qb->expr()->eq('rr.status', ':status')
            )
        );
        $qb->setParameters(array(
            'user' => $user,
            'status' => $status,
        ));

        return $qb->getQuery()->getSingleScalarResult();
    }
}
